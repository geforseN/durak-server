generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DurakGame {
  number       Int              @unique @default(autoincrement())
  uuid         String
  playersCount Int
  status       GameStatus       @default(START_WAITING)
  cardCount    Int
  gameType     GameType
  moveTime     Float
  players      UserGamePlayer[]
  createdAt    DateTime         @default(now())
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  num            Int              @unique @default(autoincrement())
  id             String           @id @unique @default(uuid())
  email          String?          @unique
  currentGameId  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserAuthInfo   UserAuthInfo?
  UserGamePlayer UserGamePlayer[]
  UserGameStat   UserGameStat?
  UserProfile    UserProfile?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserAuthInfo {
  userId   String  @id @unique
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hash     String?
  yandexId String? @unique
  githubId Int?    @unique
  vkId     Int?    @unique
  twitchId String? @unique
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserGamePlayer {
  durakGameNumber Int
  DurakGame       DurakGame     @relation(fields: [durakGameNumber], references: [number], onDelete: Cascade)
  userId          String
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  index           Int
  result          GameEndResult
  winPlace        Int?
  winRoundNumber  Int?
  hasLost         Boolean       @default(false)

  @@unique([durakGameNumber, index])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserGameStat {
  userId             String   @id @unique
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wonGamesCount      Int      @default(0)
  lostGamesCount     Int      @default(0)
  unstableGamesCount Int      @default(0)
  createdAt          DateTime @default(now())
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserProfile {
  userId        String        @id @unique
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalLink  String        @unique @default(cuid())
  updatedAt     DateTime      @updatedAt
  photoUrl      String?
  nickname      String        @default("Durak Player")
  connectStatus ConnectStatus @default(OFFLINE)
}

enum ConnectStatus {
  ONLINE
  AWAY
  OFFLINE
}

enum GameStatus {
  START_WAITING
  STARTED
  ENDED
}

enum GameType {
  BASIC
  PEREVODNOY
}

enum GameEndResult {
  WON
  LOST
}
